## Navigation (lalt - ...)
#o
# Space Navigation (four spaces per display): lalt - {1, 2, 3, 4}
# ralt - 1 : set SPACES (yabai -m query --displays --display | jq '.spaces[]'); \
#            test (count $SPACES) -ge 1; \
#            and yabai -m space --focus $SPACES[1]
# ralt - 2 : set SPACES (yabai -m query --displays --display | jq '.spaces[]'); \
#            test (count $SPACES) -ge 2; \
#            and yabai -m space --focus $SPACES[2]
# ralt - 3 : set SPACES (yabai -m query --displays --display | jq '.spaces[]'); \
#            test (count $SPACES) -ge 3; \
#            and yabai -m space --focus $SPACES[3]
# ralt - 4 : set SPACES (yabai -m query --displays --display | jq '.spaces[]'); \
#            test (count $SPACES) -ge 4; \
#            and yabai -m space --focus $SPACES[4]
# ralt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] && yabai -m space --focus $SPACES[1]
# ralt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] && yabai -m space --focus $SPACES[2]
# ralt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] && yabai -m space --focus $SPACES[3]
# ralt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] && yabai -m space --focus $SPACES[4]
# focus Nth space on current display (indexes are 0-based in jq)
ralt - 1 : sh -c 'ID=$(yabai -m query --displays --display | jq -r ".spaces[0]"); [ -n "$ID" ] && [ "$ID" != null ] && yabai -m space --focus "$ID"'
ralt - 2 : sh -c 'ID=$(yabai -m query --displays --display | jq -r ".spaces[1]"); [ -n "$ID" ] && [ "$ID" != null ] && yabai -m space --focus "$ID"'
ralt - 3 : sh -c 'ID=$(yabai -m query --displays --display | jq -r ".spaces[2]"); [ -n "$ID" ] && [ "$ID" != null ] && yabai -m space --focus "$ID"'
ralt - 4 : sh -c 'ID=$(yabai -m query --displays --display | jq -r ".spaces[3]"); [ -n "$ID" ] && [ "$ID" != null ] && yabai -m space --focus "$ID"'

# Window Navigation (through display borders): lalt - {h, j, k, l}
lalt - h    : yabai -m window --focus west  || yabai -m display --focus west
lalt - j    : yabai -m window --focus south || yabai -m display --focus south
lalt - k    : yabai -m window --focus north || yabai -m display --focus north
lalt - l    : yabai -m window --focus east  || yabai -m display --focus east

# Extended Window Navigation: lalt - {n, e}
lalt - e : yabai -m query --spaces --space \
  | jq -re ".index" \
  | xargs -I{} yabai -m query --windows --space {} \
  | jq -r '[.[] | select(.["is-minimized"]? != true)] | sort_by(.display, .frame.y, .frame.x, .id) | reverse | nth(index(map(select(.["has-focus"]? == true))) - 1).id' \
  | xargs -I{} yabai -m window --focus {}

lalt - n : yabai -m query --spaces --space \
  | jq -re ".index" \
  | xargs -I{} yabai -m query --windows --space {} \
  | jq -r '[.[] | select(.["is-minimized"]? != true)] | sort_by(.display, .frame.y, .frame.x, .id) | nth(index(map(select(.["has-focus"]? == true))) - 1).id' \
  | xargs -I{} yabai -m window --focus {}

# Float / Unfloat window: ralt - space
ralt - space : yabai -m window --toggle float

# Make window zoom to fullscreen: shift + lalt - f
ctrl + ralt - f : yabai -m window --toggle zoom-fullscreen

# Make window zoom to parent node: lalt - f
ralt - f : yabai -m window --toggle zoom-parent

## Window Movement (shift + lalt - ...)
# Moving windows in spaces: shift + lalt - {h, j, k, l}
ctrl + lalt - h : yabai -m window --warp west  || $(yabai -m window --display west && yabai -m display --focus west && yabai -m window --warp last) || yabai -m window --move rel:-10:0
ctrl + lalt - j : yabai -m window --warp south || $(yabai -m window --display south && yabai -m display --focus south) || yabai -m window --move rel:0:10
ctrl + lalt - k : yabai -m window --warp north || $(yabai -m window --display north && yabai -m display --focus north) || yabai -m window --move rel:0:-10
ctrl + lalt - l : yabai -m window --warp east  || $(yabai -m window --display east && yabai -m display --focus east && yabai -m window --warp first) || yabai -m window --move rel:10:0

# Toggle split orientation of the selected windows node: shift + lalt - s
ctrl + ralt - s : yabai -m window --toggle split

# Moving windows between spaces: shift + lalt - {1, 2, 3, 4, p, n } (Assumes 4 Spaces Max per Display)
ctrl + ralt - 1 : sh -c 'SPACES=$(yabai -m query --displays --display | jq ".spaces[]"); set -- $SPACES; [ -n "$1" ] && yabai -m window --space "$1"'
ctrl + ralt - 2 : sh -c 'SPACES=$(yabai -m query --displays --display | jq ".spaces[]"); set -- $SPACES; [ -n "$2" ] && yabai -m window --space "$2"'
ctrl + ralt - 3 : sh -c 'SPACES=$(yabai -m query --displays --display | jq ".spaces[]"); set -- $SPACES; [ -n "$3" ] && yabai -m window --space "$3"'
ctrl + ralt - 4 : sh -c 'SPACES=$(yabai -m query --displays --display | jq ".spaces[]"); set -- $SPACES; [ -n "$4" ] && yabai -m window --space "$4"'
ctrl + lalt - n : yabai -m window --space prev && yabai -m space --focus prev
ctrl + lalt - e : yabai -m window --space next && yabai -m space --focus next

# Mirror Space on X and Y Axis: shift + lalt - {x, y}
ctrl + lalt - x : yabai -m space --mirror x-axis
ctrl + lalt - y : yabai -m space --mirror y-axis

## Stacks (shift + ctrl - ...)
# Add the active window to the window or stack to the {direction}: shift + ctrl - {h, j, k, l}
shift + ctrl - h : yabai -m window  west --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - j : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - k : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - l : yabai -m window  east --stack $(yabai -m query --windows --window | jq -r '.id')

# Stack Navigation: shift + ctrl - {n, p}
shift + ctrl - n : yabai -m window --focus stack.next
shift + ctrl - p : yabai -m window --focus stack.prev

## Resize (ctrl + lalt - ...)
# Resize windows: ctrl + lalt - {h, j, k, l}
cmd + lalt - h : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
cmd + lalt - j : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
cmd + lalt - k : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
cmd + lalt - l : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# Equalize size of windows: ctrl + lalt - e
ctrl + lalt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace: ctrl + lalt - g
cmd + ctrl + ralt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

## Insertion (shift + ctrl + lalt - ...)
# Set insertion point for focused container: shift + ctrl + lalt - {h, j, k, l, s}
shift + ctrl + lalt - h : yabai -m window --insert west
shift + ctrl + lalt - j : yabai -m window --insert south
shift + ctrl + lalt - k : yabai -m window --insert north
shift + ctrl + lalt - l : yabai -m window --insert east
shift + ctrl + ralt - s : yabai -m window --insert stack

# New window in hor./ vert. splits for all applications with yabai
ralt - s : yabai -m window --insert east;  skhd -k "cmd - n"
ralt - v : yabai -m window --insert south; skhd -k "cmd - n"

# forward
# meh - s : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -r '[.[] | select(.["is-minimized"]? != true)] | sort_by(.display, .frame.y, .frame.x, .id) | reverse | nth(index(map(select(.["has-focus"]? == true))) - 1).id' \
#   | xargs -I{} yabai -m window --focus {}
#
# meh - r : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -r '[.[] | select(.["is-minimized"]? != true)] | sort_by(.display, .frame.y, .frame.x, .id) | nth(index(map(select(.["has-focus"]? == true))) - 1).id' \
#   | xargs -I{} yabai -m window --focus {}

# Resize windows
# lctrl + alt - h : yabai -m window --resize left:-50:0; \
#     yabai -m window --resize right:-50:0
# lctrl + alt - j : yabai -m window --resize bottom:0:50; \
#     yabai -m window --resize top:0:50
# lctrl + alt - k : yabai -m window --resize top:0:-50; \
#     yabai -m window --resize bottom:0:-50
# lctrl + alt - l : yabai -m window --resize right:50:0; \
#     yabai -m window --resize left:50:0

# Equalize size of windows
# meh - e : yabai -m space --balance

# Rotate windows
# meh - r : yabai -m space --rotate 270

# meh - m : yabai -m space --layout "$(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "stack" else "bsp" end')"

# Quit and restart yabai
cmd + ctrl + ralt - w : yabai --restart-service
cmd + ctrl + ralt - s : skhd --restart-service
